--01. DDL

CREATE TABLE Clients
(
	ClientId INT PRIMARY KEY IDENTITY,
	FirstName NVARCHAR(50) NOT NULL,
	LastName NVARCHAR(50) NOT NULL,
	Phone VARCHAR(12) CHECK(LEN(Phone) = 12) NOT NULL
)

CREATE TABLE Mechanics
(
	MechanicId INT PRIMARY KEY IDENTITY,
	FirstName  NVARCHAR(50) NOT NULL,
	LastName  NVARCHAR(50) NOT NULL,
	[Address]  NVARCHAR(255) NOT NULL
)

CREATE TABLE Models
(
	ModelId INT PRIMARY KEY IDENTITY,
	[Name] NVARCHAR(50) UNIQUE NOT NULL
)

CREATE TABLE Jobs
(
	JobId INT PRIMARY KEY IDENTITY,
	ModelId INT FOREIGN KEY REFERENCES Models(ModelId) NOT NULL,
	[Status] NVARCHAR(11) CHECK([Status] IN('Pending','In Progress','Finished')) DEFAULT('Pending') NOT NULL,
	ClientId INT FOREIGN KEY REFERENCES Clients(ClientId) NOT NULL,
	MechanicId INT FOREIGN KEY REFERENCES Mechanics(MechanicId),
	IssueDate DATE NOT NULL,
	FinishDate DATE
)

CREATE TABLE Orders
(
	OrderId INT PRIMARY KEY IDENTITY,
	JobId INT FOREIGN KEY REFERENCES Jobs(JobId) NOT NULL,
	IssueDate DATE,
	Delivered BIT DEFAULT(0) NOT NULL
)

CREATE TABLE Vendors
(
	VendorId INT PRIMARY KEY IDENTITY,
	[Name] NVARCHAR(50) UNIQUE
)

CREATE TABLE Parts
(
	PartId INT PRIMARY KEY IDENTITY,
	SerialNumber NVARCHAR(50) UNIQUE NOT NULL,
	[Description]NVARCHAR(255),
	Price DECIMAL(4,2) CHECK(Price > 0) NOT NULL,
	VendorId INT FOREIGN KEY REFERENCES Vendors(VendorId) NOT NULL,
	StockQty INT CHECK(StockQty >= 0) DEFAULT(0) NOT NULL
)

CREATE TABLE OrderParts
(
	OrderId INT FOREIGN KEY REFERENCES Orders(OrderId) NOT NULL,
	PartId INT FOREIGN KEY REFERENCES Parts(PartId) NOT NULL,
	Quantity INT CHECK(Quantity > 0) DEFAULT(1)

	CONSTRAINT PK_OrderAndPart PRIMARY KEY(OrderId,PartId)
)

CREATE TABLE PartsNeeded
(
	JobId INT FOREIGN KEY REFERENCES Jobs(JobId) NOT NULL,
	PartId INT FOREIGN KEY REFERENCES Parts(PartId) NOT NULL,
	Quantity INT CHECK(Quantity > 0) DEFAULT(1)

	CONSTRAINT PK_JobAndPart PRIMARY KEY(JobId,PartId)
)

--02. Insert

INSERT INTO Clients(FirstName,LastName,Phone) VALUES
('Teri','Ennaco','570-889-5187'),
('Merlyn','Lawler','201-588-7810'),
('Georgene','Montezuma','925-615-5185'),
('Jettie','Mconnell','908-802-3564'),
('Lemuel','Latzke',	'631-748-6479'),
('Melodie','Knipp','805-690-1682'),
('Candida','Corbley','908-275-8357')

INSERT INTO Parts(SerialNumber,[Description],Price,VendorId) VALUES
('WP8182119','Door Boot Seal',117.86,2),
('W10780048','Suspension Rod',42.81,1),
('W10841140','Silicone Adhesive',6.77,4),
('WPY055980','High Temperature Adhesive',13.94,3)

--03. Update

UPDATE Jobs
SET [Status] = 'In Progress',MechanicId = 3
WHERE JobId IN
(
	SELECT JobId FROM Jobs
	WHERE MechanicId IS NULL
)

--04. Delete

DELETE OrderParts 
WHERE  OrderId IN
(
	SELECT OrderId 
	FROM OrderParts 
	WHERE OrderId = 19
)
DELETE FROM Orders
WHERE OrderId = 19

--05. Mechanic Assignments

SELECT CONCAT(m.FirstName,' ',m.LastName) AS Mechanic,j.[Status],j.IssueDate
FROM Jobs AS j
JOIN Mechanics AS m ON m.MechanicId = j.MechanicId
ORDER BY m.MechanicId,j.IssueDate,j.JobId ASC

--06. Current Clients

SELECT CONCAT(c.FirstName,' ',c.LastName) AS Client,DATEDIFF(DAY,j.IssueDate,'2017-04-23')+1 AS [Days going],j.[Status]
FROM Clients AS c
JOIN Jobs AS j ON j.ClientId = c.ClientId
WHERE j.[Status] != 'Finished'
ORDER BY [Days going] DESC , c.ClientId ASC

--07. Mechanic Performance

SELECT CONCAT(FirstName, ' ', LastName) AS Mechanic,
       a.AVGDays AS AverageDays
  FROM Mechanics AS m
  JOIN 
(
	SELECT m.MechanicId AS 'Mechanic',
	       AVG(DATEDIFF(DAY, j.IssueDate, j.FinishDate)) AS 'AVGDays'
	  FROM Jobs AS j
	  JOIN Mechanics AS m
	    ON m.MechanicId = j.MechanicId
	 WHERE STATUS = 'Finished'
	 GROUP BY m.MechanicId
) AS a
    ON m.MechanicId = a.Mechanic 

--08. Available Mechanics

SELECT CONCAT(m.FirstName, ' ', m.LastName) AS Available
  FROM Mechanics AS m
 INNER JOIN
(
	SELECT * 
	  FROM Mechanics
	 WHERE MechanicId NOT IN
		(
		SELECT MechanicId FROM Jobs
		 WHERE STATUS != 'Finished' 
		   AND MechanicId IS NOT NULL
		)
) AS s
    ON s.MechanicId = m.MechanicId

--09. Past Expenses

SELECT j.JobId,
       ISNULL(SUM(op.Quantity * p.Price), 0) AS Total
  FROM Jobs AS j
  FULL OUTER JOIN Orders AS o
    ON o.JobId = j.JobId
  FULL OUTER  JOIN OrderParts AS op
    ON op.OrderId = o.OrderId
  FULL OUTER JOIN Parts AS p
    ON p.PartId = op.PartId
 WHERE j.Status = 'Finished'
 GROUP BY j.JobId
 ORDER BY Total DESC, j.JobId ASC

--10. Missing Parts

SELECT p.PartId,
	   p.[Description],
	   SUM(pn.Quantity) AS [Required],
	   AVG(p.StockQty) AS [In Stock],
	   ISNULL(SUM(op.Quantity),0) AS [Ordered]
  FROM Parts AS p
 INNER JOIN PartsNeeded AS pn
    ON pn.PartId = p.PartId
 INNER JOIN Jobs AS j
    ON j.JobId = pn.JobId
  LEFT JOIN Orders AS o
    ON o.JobId = j.JobId
  LEFT JOIN OrderParts AS op
    ON op.OrderId = o.OrderId
 WHERE j.Status <> 'Finished'
 GROUP BY p.PartId, p.Description
HAVING SUM(pn.Quantity) > AVG(p.StockQty) + ISNULL(SUM(op.Quantity),0)
 ORDER BY p.PartId

--11. Place Order

CREATE PROC usp_PlaceOrder(@JobId INT, @SerialNumber NVARCHAR(50), @Quantity INT)
AS
BEGIN

	IF(@Quantity <=0)
	BEGIN
		RAISERROR('Part quantity must be more than zero!', 16, 1)
		RETURN;
	END
	
	DECLARE @JobIdSelect INT = (SELECT JobId FROM Jobs WHERE JobId = @JobId)
	
	IF(@JobIdSelect IS NULL)
	BEGIN
		RAISERROR('Job not found!', 16, 1)
	END
	
	DECLARE @JobStatus VARCHAR(50) = (SELECT Status FROM Jobs WHERE JobId = @JobId)

	IF(@JobStatus = 'Finished')
	BEGIN
		RAISERROR('This job is not active!', 16, 1)
	END
	
	DECLARE @PartId INT = (SELECT PartId FROM Parts WHERE SerialNumber = @SerialNumber)

	IF(@PartId IS NULL)
	BEGIN
		RAISERROR('Part not found!', 16, 1)
		RETURN;
	END
	
	DECLARE @OrderId INT = (SELECT o.OrderId FROM Orders AS o
								JOIN OrderParts AS op ON op.OrderId = o.OrderId
								JOIN Parts AS p ON p.PartId = op.PartId
								WHERE JobId = @JobId AND p.PartId = @PartId AND IssueDate IS NULL)
		
	IF(@OrderId IS NULL)
	BEGIN
		INSERT INTO Orders(JobId, IssueDate) VALUES
		(@JobId, NULL)
	
		INSERT INTO OrderParts(OrderId, PartId, Quantity) VALUES
		(IDENT_CURRENT('Orders'), @PartId, @Quantity)
	END
	
	ELSE
	BEGIN
			DECLARE @PartExistanceOrder INT = (SELECT @@ROWCOUNT FROM OrderParts WHERE OrderId = @OrderId AND PartId = @PartId)
	
			IF(@PartExistanceOrder IS NULL)
			BEGIN
				INSERT INTO OrderParts(OrderId, PartId, Quantity) VALUES
				(@OrderId, @PartId, @Quantity)
			END
	
			ELSE
			BEGIN
				UPDATE OrderParts
				SET Quantity += @Quantity
				WHERE OrderId = @OrderId AND PartId = @PartId
			END
	END

END

--12. Cost of Order

CREATE FUNCTION udf_GetCost(@JobId INT)  
RETURNS DECIMAL(6, 2)   
AS
BEGIN
    DECLARE @totalCostOfParts MONEY;  

	SELECT @totalCostOfParts = SUM(op.Quantity * p.Price)
	  FROM Jobs AS j
	 INNER JOIN Orders AS o
	    ON o.JobId = j.JobId
	 INNER JOIN OrderParts AS op
	    ON op.OrderId = o.OrderId
	 INNER JOIN Parts AS p
	    ON p.PartId = op.PartId
	 WHERE j.JobId = @JobId

	IF (@totalCostOfParts IS NULL)   
		SET @totalCostOfParts = 0;  
    RETURN CAST(@totalCostOfParts as NUMERIC(10,2)); 

END

