--01. DDL

CREATE TABLE Cities
(
	Id INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(20) NOT NULL,
	CountryCode CHAR(2) NOT NULL
)

CREATE TABLE Hotels
(
	Id INT PRIMARY KEY IDENTITY,
	[Name] VARCHAR(30) NOT NULL,
	CityId INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
	EmployeeCount INT NOT NULL,
	BaseRate DECIMAL(15,2)
)

CREATE TABLE Rooms
(
	Id INT PRIMARY KEY IDENTITY,
	Price DECIMAL(15,2) NOT NULL,
	[Type] VARCHAR(20) NOT NULL,
	Beds INT NOT NULL,
	HotelId INT FOREIGN KEY REFERENCES Hotels(Id) NOT NULL
)

CREATE TABLE Trips
(
	Id INT PRIMARY KEY IDENTITY,
	RoomId INT FOREIGN KEY REFERENCES Rooms(Id) NOT NULL,
	BookDate DATE NOT NULL,
	ArrivalDate DATE NOT NULL,
	ReturnDate DATE NOT NULL,
	CancelDate DATE,

	CONSTRAINT CK_BookDate CHECK(BookDate<ArrivalDate),
	CONSTRAINT CK_ArrivalDate CHECK(ArrivalDate<ReturnDate),
)

CREATE TABLE Accounts
(
	Id INT PRIMARY KEY IDENTITY,
	FirstName VARCHAR(50) NOT NULL,
	MiddleName VARCHAR(20),
	LastName VARCHAR(50) NOT NULL,
	CityId INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
	BirthDate DATE NOT NULL,
	Email VARCHAR(100) UNIQUE NOT NULL
)

CREATE TABLE AccountsTrips
(
	AccountId INT FOREIGN KEY REFERENCES Accounts(Id) NOT NULL,
	TripId INT FOREIGN KEY REFERENCES Trips(Id) NOT NULL,
	Luggage INT CHECK(Luggage >= 0) NOT NULL

	CONSTRAINT PK_AccountTrip PRIMARY KEY(AccountId,TripId)
)

--02. Insert

INSERT INTO Accounts VALUES
('John','Smith','Smith',34,'1975-07-21','j_smith@gmail.com'),
('Gosho',NULL,'Petrov',11,'1978-05-16','g_petrov@gmail.com'),
('Ivan','Petrovich','Pavlov',59,'1849-09-26','i_pavlov@softuni.bg'),
('Friedrich','Wilhelm','Nietzsche',2,'1844-10-15','f_nietzsche@softuni.bg')

INSERT INTO Trips VALUES
(101,'2015-04-12','2015-04-14','2015-04-20','2015-02-02'),
(102,'2015-07-07','2015-07-15','2015-07-22','2015-04-29'),
(103,'2013-07-17','2013-07-23','2013-07-24',NULL),
(104,'2012-03-17','2012-03-31','2012-04-01','2012-01-10'),
(109,'2017-08-07','2017-08-28','2017-08-29',NULL)

--03. Update

UPDATE Rooms
SET Price+=Price*0.14
WHERE HotelId IN(5,7,9)

--04. Delete

DELETE FROM AccountsTrips
WHERE AccountId = 47

--05. EEE-Mails

SELECT FirstName,LastName,FORMAT(BirthDate,'MM-dd-yyyy'),c.[Name] AS Hometown,Email 
FROM Accounts AS a
JOIN Cities AS c ON c.Id = a.CityId
WHERE a.Email LIKE('e%')
ORDER BY c.[Name] ASC

--06. City Statistics

SELECT c.[Name] AS City,COUNT(h.Id) AS Hotels
FROM Cities AS c
LEFT JOIN Hotels AS h ON h.CityId = c.Id
GROUP BY c.[Name]
ORDER BY Hotels DESC,City ASC

--07. Longest and Shortest Trips

SELECT a.Id AS AccountId,CONCAT(a.FirstName,' ',a.LastName) FullName,
MAX(DATEDIFF(DAY,t.ArrivalDate,t.ReturnDate)) AS LongestTrip,
MIN(DATEDIFF(DAY,t.ArrivalDate,t.ReturnDate)) AS ShortestTrip
FROM Accounts AS a
JOIN AccountsTrips AS [at] ON [at].AccountId = a.Id
JOIN Trips AS t ON t.Id = [at].TripId
WHERE a.MiddleName IS NULL AND t.CancelDate IS NULL
GROUP BY CONCAT(a.FirstName,' ',a.LastName),a.Id
ORDER BY LongestTrip DESC,ShortestTrip

--08. Metropolis

SELECT TOP(10) c.Id,c.[Name],c.CountryCode,COUNT(a.Id) AS Accounts
FROM Cities AS c
JOIN Accounts AS a ON a.CityId = c.Id
GROUP BY c.Id,c.[Name],c.CountryCode
ORDER BY Accounts DESC

--09. Romantic Getaways

SELECT a.Id,a.Email,c.[Name] AS City,COUNT(t.Id) AS Trips
FROM Accounts AS a
JOIN AccountsTrips [at] ON [at].AccountId = a.Id
JOIN Trips t ON t.Id = [at].TripId
JOIN Rooms r ON r.Id = t.RoomId
JOIN Hotels h ON h.Id = r.HotelId
JOIN Cities c ON c.Id = h.CityId
WHERE c.Id = a.CityId
GROUP BY a.Id,a.Email,c.[Name]
ORDER BY Trips DESC,a.Id

--10. GDPR Violation

SELECT t.Id,
       CONCAT(FirstName,' ',ISNULL(MiddleName+' ',''),LastName) AS [Full Name],
	   ca.Name AS [From],
	   ct.Name AS [To],
	   IIF(t.CancelDate IS NULL,CONCAT(DATEDIFF(DAY,t.ArrivalDate,t.ReturnDate),' days'),'Canceled') AS [Duration]
FROM AccountsTrips act
JOIN Accounts a ON a.Id=act.AccountId
JOIN Trips t ON t.Id=act.TripId
JOIN Rooms r ON r.Id=t.RoomId
JOIN Hotels h ON h.Id=r.HotelId
JOIN Cities ct ON ct.Id=h.CityId
JOIN Cities ca ON ca.Id=a.CityId
ORDER BY [Full Name], t.Id

--11. Available Room

CREATE FUNCTION udf_GetAvailableRoom(@HotelId INT, @Date DATE, @People INT)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	DECLARE @roomId INT =(SELECT TOP 1 r.Id
						  FROM Rooms r
						  JOIN Trips t
						  ON t.RoomId=r.Id
						  WHERE t.CancelDate IS NULL
						  AND @Date NOT BETWEEN t.ArrivalDate AND t.CancelDate
						  AND r.HotelId=@HotelId
						  AND r.Beds>@People
						  ORDER BY r.Price DESC)

	IF (@roomId IS NULL)
	BEGIN
		RETURN 'No rooms available'
	END

	DECLARE @roomType NVARCHAR(100)=(SELECT Type FROM Rooms WHERE Id=@roomId)
	DECLARE @beds INT = (SELECT Beds FROM Rooms WHERE Id=@roomId)
	DECLARE @roomRate DECIMAL(15,2)=(SELECT Price FROM Rooms WHERE Id=@roomId)
	DECLARE @hotelRate DECIMAL(15,2)=(SELECT h.BaseRate
									  FROM Rooms r
									  JOIN Hotels h
									  ON h.Id=r.HotelId
									  WHERE r.Id=@roomId)

	DECLARE @totalPrice DECIMAL(15,2) = (@hotelRate+@roomRate)*@People

	RETURN CONCAT('Room ',@roomId,': ',@roomType, ' (',@beds,' beds) - $',@totalPrice)
END

--12. Switch Room

CREATE PROCEDURE usp_SwitchRoom(@TripId INT, @TargetRoomId INT)
AS
BEGIN
	DECLARE @tripPeopleCount INT = (SELECT COUNT(*)
								    FROM AccountsTrips
								    WHERE TripId=@TripId)

	DECLARE @currentHotelId INT = (SELECT HotelId
								   FROM Rooms
								   WHERE Id=@TripId)

	DECLARE @targetHotelId INT = (SELECT HotelId
								  FROM Rooms
								  WHERE Id=@TargetRoomId)

	IF(@currentHotelId<>@targetHotelId)
	BEGIN
		RAISERROR('Target room is in another hotel!',16,1)
		RETURN
	END

	DECLARE @targetBeds INT = (SELECT Beds
							   FROM Rooms
							   WHERE Id=@TargetRoomId)

	IF(@tripPeopleCount>@targetBeds)
	BEGIN
		RAISERROR('Not enough beds in target room!',16,2)
		RETURN
	END

	UPDATE Trips
	SET RoomId=@TargetRoomId
	WHERE Id=@TripId
END
