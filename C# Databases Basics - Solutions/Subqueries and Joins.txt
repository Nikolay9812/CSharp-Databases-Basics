--01. Employee Address

SELECT TOP(5) e.EmployeeID,e.JobTitle,e.AddressID,a.AddressText 
FROM Employees AS e
JOIN Addresses AS a ON a.AddressID = e.AddressID 
ORDER BY e.AddressID ASC

--02. Addresses with Towns

SELECT TOP(50) e.FirstName,e.LastName,t.[Name] AS Town,a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON a.AddressID = e.AddressID
JOIN Towns AS t ON t.TownID = a.TownID
ORDER BY e.FirstName,e.LastName ASC

--03. Sales Employees

SELECT e.EmployeeID,e.FirstName,e.LastName,d.[Name] AS [DepartmentName]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE d.[Name] = 'Sales'
ORDER BY e.EmployeeID ASC

--04. Employee Departments

SELECT TOP(5) e.EmployeeID,e.FirstName,e.Salary,d.[Name] AS [DepartmentName]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE e.Salary > 15000
ORDER BY e.DepartmentID ASC

--05. Employees Without Projects

SELECT TOP(3) e.EmployeeID,e.FirstName 
FROM Employees AS e
LEFT JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
WHERE ep.ProjectID IS NULL
ORDER BY e.EmployeeID ASC

--06. Employees Hired After

SELECT e.FirstName,e.LastName,e.HireDate,d.[Name] AS [DepTName]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE e.HireDate > '1.1.1999' AND d.[Name] = 'Sales' OR d.[Name] = 'Finance'
ORDER BY e.HireDate ASC

--07. Employees With Project

SELECT TOP(5) e.EmployeeID,e.FirstName,p.[Name] AS [ProjectName]
FROM Employees AS e
JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
JOIN Projects AS p ON ep.ProjectID = p.ProjectID
WHERE p.StartDate > '08-13-2002'
ORDER BY e.EmployeeID ASC

--08. Employee 24

SELECT e.EmployeeID,e.FirstName,
CASE
	WHEN YEAR(p.StartDate) < 2005 THEN p.[Name]
	ELSE NULL
END AS [ProjectName]
FROM Employees AS e
JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
JOIN Projects AS p ON ep.ProjectID = p.ProjectID
WHERE e.EmployeeID = 24

--09. Employee Manager

SELECT m.EmployeeID,m.FirstName,m.ManagerID,e.FirstName AS [ManagerName]
FROM Employees AS m
JOIN Employees AS e ON e.EmployeeID = m.ManagerID
WHERE m.ManagerID = 3 OR m.ManagerID = 7
ORDER BY m.EmployeeID ASC

--10. Employees Summary

SELECT TOP(50) 
m.EmployeeID,
CONCAT(m.FirstName,' ',m.LastName) AS [EmployeeName],
CONCAT(e.FirstName,' ',e.LastName) AS [ManagerName],
d.[Name] AS [DepartmentName]
FROM Employees AS m
JOIN Employees AS e ON m.ManagerID = e.EmployeeID
JOIN Departments AS d ON m.DepartmentID = d.DepartmentID
ORDER BY m.EmployeeID

--11. Min Average Salary

SELECT TOP(1) AVG(Salary) AS [MinAverageSalary]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
GROUP BY d.DepartmentID
ORDER BY [MinAverageSalary]
--12. Highest Peaks in Bulgaria

SELECT c.CountryCode,m.MountainRange,p.PeakName,p.Elevation
FROM Countries AS c
JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
JOIN Mountains AS m ON mc.MountainId = m.Id
JOIN Peaks AS p ON m.Id = P.MountainId
WHERE c.CountryCode = 'BG' AND p.Elevation > 2835
ORDER BY p.Elevation DESC

--13. Count Mountain Ranges

SELECT c.CountryCode,COUNT(*) AS [MountainRanges]
	FROM Countries AS c
	JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
WHERE c.CountryCode IN ('US', 'RU', 'BG')
GROUP BY c.CountryCode

--14. Countries With or Without Rivers

SELECT TOP(5) c.CountryName,r.RiverName
FROM Countries AS c
LEFT JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
LEFT JOIN Rivers AS r ON cr.RiverId = r.Id
WHERE c.ContinentCode = 'AF'
ORDER BY c.CountryName ASC

--15. Continets and Most Used Currencies

WITH CCYContUsage_CTE (ContinentCode, CurrencyCode, CurrencyUsage) AS (
  SELECT ContinentCode, CurrencyCode, COUNT(CountryCode) AS CurrencyUsage
  FROM Countries 
  GROUP BY ContinentCode, CurrencyCode
  HAVING COUNT(CountryCode) > 1  
)
SELECT ContMax.ContinentCode, ccy.CurrencyCode, ContMax.CurrencyUsage 
  FROM
  (SELECT ContinentCode, MAX(CurrencyUsage) AS CurrencyUsage
   FROM CCYContUsage_CTE 
   GROUP BY ContinentCode) AS ContMax
JOIN CCYContUsage_CTE AS ccy 
ON (ContMax.ContinentCode = ccy.ContinentCode AND ContMax.CurrencyUsage = ccy.CurrencyUsage)
ORDER BY ContMax.ContinentCode

--16. Countries without any Mountains

SELECT
  COUNT(c.CountryCode) AS CountryCode
FROM Countries AS c
LEFT JOIN MountainsCountries AS m ON c.CountryCode = m.CountryCode
WHERE m.MountainId IS NULL

--17. Highest Peak and Longest River by Country

SELECT TOP 5 c.CountryName,
  MAX(p.Elevation) AS HighestPeakElevation,
  MAX(r.Length) AS LongestRiverLength
FROM Countries AS c
  LEFT JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
  LEFT JOIN Peaks AS p ON p.MountainId = mc.MountainId
  LEFT JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
  LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
GROUP BY c.CountryName
ORDER BY HighestPeakElevation DESC, LongestRiverLength DESC, c.CountryName

--18. Highest Peak Name and Elevation by Country

WITH PeaksMountains_CTE (Country, PeakName, Elevation, Mountain) AS (

  SELECT c.CountryName, p.PeakName, p.Elevation, m.MountainRange
  FROM Countries AS c
  LEFT JOIN MountainsCountries as mc ON c.CountryCode = mc.CountryCode
  LEFT JOIN Mountains AS m ON mc.MountainId = m.Id
  LEFT JOIN Peaks AS p ON p.MountainId = m.Id
)

SELECT TOP 5
  TopElevations.Country AS Country,
  ISNULL(pm.PeakName, '(no highest peak)') AS HighestPeakName,
  ISNULL(TopElevations.HighestElevation, 0) AS HighestPeakElevation,	
  ISNULL(pm.Mountain, '(no mountain)') AS Mountain
FROM 
  (SELECT Country, MAX(Elevation) AS HighestElevation
   FROM PeaksMountains_CTE 
   GROUP BY Country) AS TopElevations
LEFT JOIN PeaksMountains_CTE AS pm 
ON (TopElevations.Country = pm.Country AND TopElevations.HighestElevation = pm.Elevation)
ORDER BY Country, HighestPeakName 